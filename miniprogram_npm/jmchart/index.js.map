{"version":3,"sources":["index.js","src/component/vchart.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('./src/jmChart.js');var jmChart = __REQUIRE_DEFAULT__(__TEMP__);\r\nvar __TEMP__ = require('./src/component/vchart.js');var vChart = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = jmChart;\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });Object.defineProperty(exports, 'jmChart', { enumerable: true, configurable: true, get: function() { return jmChart; } });Object.defineProperty(exports, 'vChart', { enumerable: true, configurable: true, get: function() { return vChart; } });\n\n\n","\r\n\r\nvar __TEMP__ = require('../../index.js');var jmChart = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\r\n    props: {\r\n        chartData: Array,\r\n        chartOptions: Object,\r\n        chartSeries: Array,\r\n        width: {\r\n            type: String,\r\n            default: 200\r\n        },\r\n        height: {\r\n            type: String,\r\n            default: 200\r\n        }\r\n    },\r\n    data: function() {\r\n        return {\r\n            //chartData: this.chartData,\r\n            option: this.chartOptions\r\n        }\r\n    },\r\n    // jmChart实例\r\n    chartInstance: null,\r\n\r\n    mounted () {\r\n        this.option = Object.assign({\r\n            enableAnimate: false,\r\n            legendPosition: 'top',\r\n            legendVisible: true, // 不显示图例    \r\n            width: this.width,\r\n            height: this.height        \r\n        }, this.chartOptions);   \r\n        \r\n        this.initChart();\r\n    },\r\n    // DOM更新\r\n    updated() {\r\n        this.initChart();\r\n    },\r\n\r\n    // 销毁\r\n    destroyed() {\r\n        this.chartInstance && this.chartInstance.destroy();\r\n    },\r\n\r\n    watch: {\r\n        // 数据发生改变，刷新\r\n        chartData: function(newData, oldData) {\r\n            this.refresh();\r\n        },\r\n        width: function(newWidth, oldWidth) {\r\n            if(!this.chartInstance) return;            \r\n            this.$nextTick(()=>{\r\n                if(!this.chartInstance || !this.$refs.jmChartContainer) return;          \r\n                this.chartInstance.width = this.$refs.jmChartContainer.clientWidth||this.$refs.jmChartContainer.offsetWidth;\r\n                //this.chartInstance.refresh();\r\n            });\r\n        },\r\n        height: function(newHeight, oldHeight) {\r\n            if(!this.chartInstance) return;\r\n            this.$nextTick(()=>{\r\n                if(!this.chartInstance || !this.$refs.jmChartContainer) return;          \r\n                this.chartInstance.height = this.$refs.jmChartContainer.clientHeight||this.$refs.jmChartContainer.offsetHeight;\r\n                //this.chartInstance.refresh();\r\n            });\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        // 初始化图表组件\r\n        initChart() {\r\n            if(this.chartInstance) return;\r\n            \r\n            this.chartInstance = new jmChart(this.$refs.jmChartContainer, this.option);\r\n            \r\n            if(this.chartData && this.chartData.length) this.refresh(); // 这里有死循环的问题，但上面 chartInstance不为空就返回了，就没有这个问题了\r\n            \r\n            // touch改变数据点事件\r\n            this.chartInstance.bind('touchPointChange', (args) => {\r\n                this.$emit('touch-point-change', args);\r\n            });\r\n\r\n            // 图表标线事件\r\n            this.chartInstance.bind('marklinelongtapstart', (args) => {\r\n                this.$emit('markline-longtap-start', args);\r\n            });\r\n            this.chartInstance.bind('marklinestartmove', (args) => {\r\n                this.$emit('markline-start-move', args);\r\n            });\r\n            this.chartInstance.bind('marklinemove', (args) => {\r\n                this.$emit('markline-move', args);\r\n            });\r\n            this.chartInstance.bind('marklineendmove', (args) => {\r\n                this.$emit('markline-end-move', args);\r\n            });\r\n\r\n            // touch事件\r\n            this.chartInstance.touchGraph.bind('touchstart mousedown', (args) => {\r\n                this.$emit('touchstart', args);\r\n                this.$emit('mousedown', args);\r\n            });\r\n            this.chartInstance.touchGraph.bind('touchmove mousemove', (args) => {\r\n                this.$emit('touchmove', args);\r\n                this.$emit('mousemove', args);\r\n            });\r\n            this.chartInstance.touchGraph.bind('touchend touchcancel mouseup', (args) => {\r\n                this.$emit('touchend', args);\r\n                this.$emit('mouseup', args);\r\n            });\r\n            this.chartInstance.touchGraph.bind('touchleave', (args) => {\r\n                this.$emit('touchleave', args);\r\n            });\r\n        },\r\n\r\n        // 刷新图表\r\n        refresh() {\r\n            this.$nextTick(()=>{\r\n                this.initChart();\r\n\r\n                // 清空当前图形，重新生成\r\n                this.chartInstance.reset();\r\n    \r\n                // 生成图\r\n                if(this.chartSeries.length) {\r\n                    for(let s of this.chartSeries) {\r\n                        if(!s.type) {\r\n                            console.error('必须指定serie type');\r\n                            continue;\r\n                        }\r\n                        this.chartInstance.createSeries(s.type, s);\r\n                    }\r\n                }\r\n                this.chartInstance.data = this.chartData;\r\n                this.chartInstance.refresh();\r\n            });            \r\n        }\r\n    },\r\n\r\n    template: `<div ref=\"jmChartContainer\" :style=\"{width: width, height: height}\"></div>`\r\n};\r\n"]}